name: üß™ C# Compilation Test

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
    paths:
      - ".github/workflows/test-compile.yml"
      - "**/*.cs"
      - "**/*.csproj"
      - "*.sln"

jobs:
  compile-test:
    runs-on: windows-latest

    env:
      SOLUTION_NAME: Mee6LevelsAPI.sln

    steps:
      - name: ‚öôÔ∏è Configure Git
        shell: pwsh
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global credential.helper store
#          echo "https://x-access-token:${{ secrets.GH_TOKEN }}@github.com" > $env:USERPROFILE\.git-credentials
          
      - name: üßæ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: üì¶ Restore NuGet Packages
        shell: pwsh
        run: |
          Write-Host "üì¶ Restoring NuGet packages..."

          # Common VS NuGet paths to check
          $possiblePaths = @(
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Professional\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.exe",
            "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.exe"
          )

          $nuget = $possiblePaths | Where-Object { Test-Path $_ } | Select-Object -First 1

          if (-not $nuget) {
            Write-Host "‚ö†Ô∏è NuGet.exe not found in Visual Studio paths. Downloading latest standalone version..."
            Invoke-WebRequest -Uri "https://dist.nuget.org/win-x86-commandline/latest/nuget.exe" -OutFile nuget.exe -UseBasicParsing
            $nuget = ".\nuget.exe"
          }

          Write-Host "üì¶ Using NuGet at: $nuget"

          & $nuget restore "$env:SOLUTION_NAME" -NonInteractive -Verbosity detailed

          if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå NuGet restore failed."
            exit $LASTEXITCODE
          }

          Write-Host "‚úÖ NuGet packages restored successfully."

      - name: üèóÔ∏è Build Solution (Classic MSBuild)
        shell: pwsh
        run: |
          $solution = "$env:SOLUTION_NAME"
          $possiblePaths = @(
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Professional\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin\MSBuild.exe",
            "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\MSBuild\Current\Bin\MSBuild.exe"
          )
          $msbuild = $possiblePaths | Where-Object { Test-Path $_ } | Select-Object -First 1
          if (-not $msbuild) {
            Write-Host "‚ùå Could not locate MSBuild.exe."
            exit 1
          }
          Write-Host "üèóÔ∏è Using MSBuild at: $msbuild"
          & "$msbuild" $solution `
            /t:Restore,Build `
            /m:4 /nr:false `
            /p:Configuration=Release `
            /p:Platform="Any CPU" `
            /p:CI=true `
            /p:StyleCopEnabled=false
          if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Build failed."
            exit $LASTEXITCODE
          } else {
            Write-Host "‚úÖ Build succeeded."
          }

      - name: ‚úÖ Verify Build Success
        run: echo "‚úÖ $env:SOLUTION_NAME compiled successfully on GitHub Actions."
 
